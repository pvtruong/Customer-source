'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace VNPT
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="PublishServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class PublishService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private ImportAndPublishInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private publishInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateCusOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setCusCertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ImportFromXmlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncInfomationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SignInOperationCompleted As System.Threading.SendOrPostCallback
        
        Private resetPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AppClientSyncInfoSystemOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCurrentNoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncClientInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private updateInvoiceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncDecisionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncPublishOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPublishInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncInvCancelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getDateTimeServerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncClientInvoiceCancelOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ConvertForVerifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private sendEmailOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncCertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncInvoicev2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private syncInvoiceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetSingleInvoiceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private PaymentForVerifyOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHashInvWithTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private publishInvWithTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AdjustReplaceInvWithTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CancelInvoiceWithTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private rolBackWithTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private importCertWithTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getStatusInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getHashInvOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Vhd1.My.MySettings.Default.Vhd1_VNPT_PublishService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event ImportAndPublishInvCompleted As ImportAndPublishInvCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportInvCompleted As ImportInvCompletedEventHandler
        
        '''<remarks/>
        Public Event publishInvCompleted As publishInvCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateCusCompleted As UpdateCusCompletedEventHandler
        
        '''<remarks/>
        Public Event setCusCertCompleted As setCusCertCompletedEventHandler
        
        '''<remarks/>
        Public Event ImportFromXmlCompleted As ImportFromXmlCompletedEventHandler
        
        '''<remarks/>
        Public Event syncInfomationCompleted As syncInfomationCompletedEventHandler
        
        '''<remarks/>
        Public Event SignInCompleted As SignInCompletedEventHandler
        
        '''<remarks/>
        Public Event resetPasswordCompleted As resetPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event AppClientSyncInfoSystemCompleted As AppClientSyncInfoSystemCompletedEventHandler
        
        '''<remarks/>
        Public Event getCurrentNoCompleted As getCurrentNoCompletedEventHandler
        
        '''<remarks/>
        Public Event syncClientInvCompleted As syncClientInvCompletedEventHandler
        
        '''<remarks/>
        Public Event updateInvoiceCompleted As updateInvoiceCompletedEventHandler
        
        '''<remarks/>
        Public Event syncDecisionCompleted As syncDecisionCompletedEventHandler
        
        '''<remarks/>
        Public Event syncPublishCompleted As syncPublishCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPublishInvCompleted As GetPublishInvCompletedEventHandler
        
        '''<remarks/>
        Public Event syncInvCancelCompleted As syncInvCancelCompletedEventHandler
        
        '''<remarks/>
        Public Event getDateTimeServerCompleted As getDateTimeServerCompletedEventHandler
        
        '''<remarks/>
        Public Event syncClientInvoiceCancelCompleted As syncClientInvoiceCancelCompletedEventHandler
        
        '''<remarks/>
        Public Event ConvertForVerifyCompleted As ConvertForVerifyCompletedEventHandler
        
        '''<remarks/>
        Public Event sendEmailCompleted As sendEmailCompletedEventHandler
        
        '''<remarks/>
        Public Event syncCertCompleted As syncCertCompletedEventHandler
        
        '''<remarks/>
        Public Event syncInvoicev2Completed As syncInvoicev2CompletedEventHandler
        
        '''<remarks/>
        Public Event syncInvoiceCompleted As syncInvoiceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetSingleInvoiceCompleted As GetSingleInvoiceCompletedEventHandler
        
        '''<remarks/>
        Public Event PaymentForVerifyCompleted As PaymentForVerifyCompletedEventHandler
        
        '''<remarks/>
        Public Event getHashInvWithTokenCompleted As getHashInvWithTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event publishInvWithTokenCompleted As publishInvWithTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event AdjustReplaceInvWithTokenCompleted As AdjustReplaceInvWithTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event CancelInvoiceWithTokenCompleted As CancelInvoiceWithTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event rolBackWithTokenCompleted As rolBackWithTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event importCertWithTokenCompleted As importCertWithTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event getStatusInvCompleted As getStatusInvCompletedEventHandler
        
        '''<remarks/>
        Public Event getHashInvCompleted As getHashInvCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportAndPublishInv", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportAndPublishInv(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String, ByVal convert As Integer) As String
            Dim results() As Object = Me.Invoke("ImportAndPublishInv", New Object() {Account, ACpass, xmlInvData, username, password, pattern, serial, convert})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportAndPublishInvAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String, ByVal convert As Integer)
            Me.ImportAndPublishInvAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, convert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportAndPublishInvAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String, ByVal convert As Integer, ByVal userState As Object)
            If (Me.ImportAndPublishInvOperationCompleted Is Nothing) Then
                Me.ImportAndPublishInvOperationCompleted = AddressOf Me.OnImportAndPublishInvOperationCompleted
            End If
            Me.InvokeAsync("ImportAndPublishInv", New Object() {Account, ACpass, xmlInvData, username, password, pattern, serial, convert}, Me.ImportAndPublishInvOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportAndPublishInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportAndPublishInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportAndPublishInvCompleted(Me, New ImportAndPublishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportInv", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportInv(ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal convert As Integer) As String
            Dim results() As Object = Me.Invoke("ImportInv", New Object() {xmlInvData, username, password, convert})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportInvAsync(ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal convert As Integer)
            Me.ImportInvAsync(xmlInvData, username, password, convert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportInvAsync(ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal convert As Integer, ByVal userState As Object)
            If (Me.ImportInvOperationCompleted Is Nothing) Then
                Me.ImportInvOperationCompleted = AddressOf Me.OnImportInvOperationCompleted
            End If
            Me.InvokeAsync("ImportInv", New Object() {xmlInvData, username, password, convert}, Me.ImportInvOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportInvCompleted(Me, New ImportInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishInv", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function publishInv(ByVal invIDs() As Integer, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String) As String
            Dim results() As Object = Me.Invoke("publishInv", New Object() {invIDs, username, password, pattern, serial})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub publishInvAsync(ByVal invIDs() As Integer, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String)
            Me.publishInvAsync(invIDs, username, password, pattern, serial, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub publishInvAsync(ByVal invIDs() As Integer, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String, ByVal userState As Object)
            If (Me.publishInvOperationCompleted Is Nothing) Then
                Me.publishInvOperationCompleted = AddressOf Me.OnpublishInvOperationCompleted
            End If
            Me.InvokeAsync("publishInv", New Object() {invIDs, username, password, pattern, serial}, Me.publishInvOperationCompleted, userState)
        End Sub
        
        Private Sub OnpublishInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.publishInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent publishInvCompleted(Me, New publishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCus", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateCus(ByVal XMLCusData As String, ByVal username As String, ByVal pass As String, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal convert As System.Nullable(Of Integer)) As Integer
            Dim results() As Object = Me.Invoke("UpdateCus", New Object() {XMLCusData, username, pass, convert})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateCusAsync(ByVal XMLCusData As String, ByVal username As String, ByVal pass As String, ByVal convert As System.Nullable(Of Integer))
            Me.UpdateCusAsync(XMLCusData, username, pass, convert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateCusAsync(ByVal XMLCusData As String, ByVal username As String, ByVal pass As String, ByVal convert As System.Nullable(Of Integer), ByVal userState As Object)
            If (Me.UpdateCusOperationCompleted Is Nothing) Then
                Me.UpdateCusOperationCompleted = AddressOf Me.OnUpdateCusOperationCompleted
            End If
            Me.InvokeAsync("UpdateCus", New Object() {XMLCusData, username, pass, convert}, Me.UpdateCusOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateCusOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateCusCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateCusCompleted(Me, New UpdateCusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/setCusCert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setCusCert(ByVal certSerial As String, ByVal certString As String, ByVal cusCode As String, ByVal username As String, ByVal pass As String) As Integer
            Dim results() As Object = Me.Invoke("setCusCert", New Object() {certSerial, certString, cusCode, username, pass})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub setCusCertAsync(ByVal certSerial As String, ByVal certString As String, ByVal cusCode As String, ByVal username As String, ByVal pass As String)
            Me.setCusCertAsync(certSerial, certString, cusCode, username, pass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setCusCertAsync(ByVal certSerial As String, ByVal certString As String, ByVal cusCode As String, ByVal username As String, ByVal pass As String, ByVal userState As Object)
            If (Me.setCusCertOperationCompleted Is Nothing) Then
                Me.setCusCertOperationCompleted = AddressOf Me.OnsetCusCertOperationCompleted
            End If
            Me.InvokeAsync("setCusCert", New Object() {certSerial, certString, cusCode, username, pass}, Me.setCusCertOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetCusCertOperationCompleted(ByVal arg As Object)
            If (Not (Me.setCusCertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setCusCertCompleted(Me, New setCusCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportFromXml", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ImportFromXml(ByVal account As String, ByVal pass As String, ByVal userName As String, ByVal password As String, ByVal productXml As String) As String
            Dim results() As Object = Me.Invoke("ImportFromXml", New Object() {account, pass, userName, password, productXml})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ImportFromXmlAsync(ByVal account As String, ByVal pass As String, ByVal userName As String, ByVal password As String, ByVal productXml As String)
            Me.ImportFromXmlAsync(account, pass, userName, password, productXml, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ImportFromXmlAsync(ByVal account As String, ByVal pass As String, ByVal userName As String, ByVal password As String, ByVal productXml As String, ByVal userState As Object)
            If (Me.ImportFromXmlOperationCompleted Is Nothing) Then
                Me.ImportFromXmlOperationCompleted = AddressOf Me.OnImportFromXmlOperationCompleted
            End If
            Me.InvokeAsync("ImportFromXml", New Object() {account, pass, userName, password, productXml}, Me.ImportFromXmlOperationCompleted, userState)
        End Sub
        
        Private Sub OnImportFromXmlOperationCompleted(ByVal arg As Object)
            If (Not (Me.ImportFromXmlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ImportFromXmlCompleted(Me, New ImportFromXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInfomation", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncInfomation(ByVal Account As String, ByVal ACpass As String, ByVal req As String) As String
            Dim results() As Object = Me.Invoke("syncInfomation", New Object() {Account, ACpass, req})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncInfomationAsync(ByVal Account As String, ByVal ACpass As String, ByVal req As String)
            Me.syncInfomationAsync(Account, ACpass, req, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncInfomationAsync(ByVal Account As String, ByVal ACpass As String, ByVal req As String, ByVal userState As Object)
            If (Me.syncInfomationOperationCompleted Is Nothing) Then
                Me.syncInfomationOperationCompleted = AddressOf Me.OnsyncInfomationOperationCompleted
            End If
            Me.InvokeAsync("syncInfomation", New Object() {Account, ACpass, req}, Me.syncInfomationOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncInfomationOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncInfomationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncInfomationCompleted(Me, New syncInfomationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SignIn", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SignIn(ByVal userName As String, ByVal pass As String) As String
            Dim results() As Object = Me.Invoke("SignIn", New Object() {userName, pass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SignInAsync(ByVal userName As String, ByVal pass As String)
            Me.SignInAsync(userName, pass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SignInAsync(ByVal userName As String, ByVal pass As String, ByVal userState As Object)
            If (Me.SignInOperationCompleted Is Nothing) Then
                Me.SignInOperationCompleted = AddressOf Me.OnSignInOperationCompleted
            End If
            Me.InvokeAsync("SignIn", New Object() {userName, pass}, Me.SignInOperationCompleted, userState)
        End Sub
        
        Private Sub OnSignInOperationCompleted(ByVal arg As Object)
            If (Not (Me.SignInCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SignInCompleted(Me, New SignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/resetPassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function resetPassword(ByVal Account As String, ByVal oldPass As String, ByVal newPass As String) As String
            Dim results() As Object = Me.Invoke("resetPassword", New Object() {Account, oldPass, newPass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub resetPasswordAsync(ByVal Account As String, ByVal oldPass As String, ByVal newPass As String)
            Me.resetPasswordAsync(Account, oldPass, newPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub resetPasswordAsync(ByVal Account As String, ByVal oldPass As String, ByVal newPass As String, ByVal userState As Object)
            If (Me.resetPasswordOperationCompleted Is Nothing) Then
                Me.resetPasswordOperationCompleted = AddressOf Me.OnresetPasswordOperationCompleted
            End If
            Me.InvokeAsync("resetPassword", New Object() {Account, oldPass, newPass}, Me.resetPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnresetPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.resetPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent resetPasswordCompleted(Me, New resetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AppClientSyncInfoSystem", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AppClientSyncInfoSystem(ByVal Account As String, ByVal ACpass As String, ByVal req As String) As String
            Dim results() As Object = Me.Invoke("AppClientSyncInfoSystem", New Object() {Account, ACpass, req})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AppClientSyncInfoSystemAsync(ByVal Account As String, ByVal ACpass As String, ByVal req As String)
            Me.AppClientSyncInfoSystemAsync(Account, ACpass, req, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AppClientSyncInfoSystemAsync(ByVal Account As String, ByVal ACpass As String, ByVal req As String, ByVal userState As Object)
            If (Me.AppClientSyncInfoSystemOperationCompleted Is Nothing) Then
                Me.AppClientSyncInfoSystemOperationCompleted = AddressOf Me.OnAppClientSyncInfoSystemOperationCompleted
            End If
            Me.InvokeAsync("AppClientSyncInfoSystem", New Object() {Account, ACpass, req}, Me.AppClientSyncInfoSystemOperationCompleted, userState)
        End Sub
        
        Private Sub OnAppClientSyncInfoSystemOperationCompleted(ByVal arg As Object)
            If (Not (Me.AppClientSyncInfoSystemCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AppClientSyncInfoSystemCompleted(Me, New AppClientSyncInfoSystemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getCurrentNo", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCurrentNo(ByVal account As String, ByVal pass As String, ByVal pattern As String, ByVal serial As String) As String
            Dim results() As Object = Me.Invoke("getCurrentNo", New Object() {account, pass, pattern, serial})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCurrentNoAsync(ByVal account As String, ByVal pass As String, ByVal pattern As String, ByVal serial As String)
            Me.getCurrentNoAsync(account, pass, pattern, serial, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCurrentNoAsync(ByVal account As String, ByVal pass As String, ByVal pattern As String, ByVal serial As String, ByVal userState As Object)
            If (Me.getCurrentNoOperationCompleted Is Nothing) Then
                Me.getCurrentNoOperationCompleted = AddressOf Me.OngetCurrentNoOperationCompleted
            End If
            Me.InvokeAsync("getCurrentNo", New Object() {account, pass, pattern, serial}, Me.getCurrentNoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCurrentNoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCurrentNoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCurrentNoCompleted(Me, New getCurrentNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncClientInv", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncClientInv(ByVal username As String, ByVal password As String, ByVal xmlInvData As String, ByVal convert As Integer) As String
            Dim results() As Object = Me.Invoke("syncClientInv", New Object() {username, password, xmlInvData, convert})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncClientInvAsync(ByVal username As String, ByVal password As String, ByVal xmlInvData As String, ByVal convert As Integer)
            Me.syncClientInvAsync(username, password, xmlInvData, convert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncClientInvAsync(ByVal username As String, ByVal password As String, ByVal xmlInvData As String, ByVal convert As Integer, ByVal userState As Object)
            If (Me.syncClientInvOperationCompleted Is Nothing) Then
                Me.syncClientInvOperationCompleted = AddressOf Me.OnsyncClientInvOperationCompleted
            End If
            Me.InvokeAsync("syncClientInv", New Object() {username, password, xmlInvData, convert}, Me.syncClientInvOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncClientInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncClientInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncClientInvCompleted(Me, New syncClientInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateInvoice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function updateInvoice(ByVal username As String, ByVal password As String, ByVal xmlInvData As String) As String
            Dim results() As Object = Me.Invoke("updateInvoice", New Object() {username, password, xmlInvData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub updateInvoiceAsync(ByVal username As String, ByVal password As String, ByVal xmlInvData As String)
            Me.updateInvoiceAsync(username, password, xmlInvData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub updateInvoiceAsync(ByVal username As String, ByVal password As String, ByVal xmlInvData As String, ByVal userState As Object)
            If (Me.updateInvoiceOperationCompleted Is Nothing) Then
                Me.updateInvoiceOperationCompleted = AddressOf Me.OnupdateInvoiceOperationCompleted
            End If
            Me.InvokeAsync("updateInvoice", New Object() {username, password, xmlInvData}, Me.updateInvoiceOperationCompleted, userState)
        End Sub
        
        Private Sub OnupdateInvoiceOperationCompleted(ByVal arg As Object)
            If (Not (Me.updateInvoiceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent updateInvoiceCompleted(Me, New updateInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncDecision", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncDecision(ByVal Account As String, ByVal Pass As String, ByVal xmlDecision As String) As String
            Dim results() As Object = Me.Invoke("syncDecision", New Object() {Account, Pass, xmlDecision})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncDecisionAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlDecision As String)
            Me.syncDecisionAsync(Account, Pass, xmlDecision, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncDecisionAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlDecision As String, ByVal userState As Object)
            If (Me.syncDecisionOperationCompleted Is Nothing) Then
                Me.syncDecisionOperationCompleted = AddressOf Me.OnsyncDecisionOperationCompleted
            End If
            Me.InvokeAsync("syncDecision", New Object() {Account, Pass, xmlDecision}, Me.syncDecisionOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncDecisionOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncDecisionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncDecisionCompleted(Me, New syncDecisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncPublish", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncPublish(ByVal Account As String, ByVal Pass As String, ByVal xmlPublish As String) As String
            Dim results() As Object = Me.Invoke("syncPublish", New Object() {Account, Pass, xmlPublish})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncPublishAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlPublish As String)
            Me.syncPublishAsync(Account, Pass, xmlPublish, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncPublishAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlPublish As String, ByVal userState As Object)
            If (Me.syncPublishOperationCompleted Is Nothing) Then
                Me.syncPublishOperationCompleted = AddressOf Me.OnsyncPublishOperationCompleted
            End If
            Me.InvokeAsync("syncPublish", New Object() {Account, Pass, xmlPublish}, Me.syncPublishOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncPublishOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncPublishCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncPublishCompleted(Me, New syncPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPublishInv", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPublishInv(ByVal account As String, ByVal pass As String, ByVal comtaxCode As String) As String
            Dim results() As Object = Me.Invoke("GetPublishInv", New Object() {account, pass, comtaxCode})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPublishInvAsync(ByVal account As String, ByVal pass As String, ByVal comtaxCode As String)
            Me.GetPublishInvAsync(account, pass, comtaxCode, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPublishInvAsync(ByVal account As String, ByVal pass As String, ByVal comtaxCode As String, ByVal userState As Object)
            If (Me.GetPublishInvOperationCompleted Is Nothing) Then
                Me.GetPublishInvOperationCompleted = AddressOf Me.OnGetPublishInvOperationCompleted
            End If
            Me.InvokeAsync("GetPublishInv", New Object() {account, pass, comtaxCode}, Me.GetPublishInvOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPublishInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPublishInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPublishInvCompleted(Me, New GetPublishInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvCancel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncInvCancel(ByVal Account As String, ByVal Pass As String, ByVal xmlInvCancel As String) As String
            Dim results() As Object = Me.Invoke("syncInvCancel", New Object() {Account, Pass, xmlInvCancel})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncInvCancelAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlInvCancel As String)
            Me.syncInvCancelAsync(Account, Pass, xmlInvCancel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncInvCancelAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlInvCancel As String, ByVal userState As Object)
            If (Me.syncInvCancelOperationCompleted Is Nothing) Then
                Me.syncInvCancelOperationCompleted = AddressOf Me.OnsyncInvCancelOperationCompleted
            End If
            Me.InvokeAsync("syncInvCancel", New Object() {Account, Pass, xmlInvCancel}, Me.syncInvCancelOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncInvCancelOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncInvCancelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncInvCancelCompleted(Me, New syncInvCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getDateTimeServer", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getDateTimeServer(ByVal Account As String, ByVal Pass As String) As String
            Dim results() As Object = Me.Invoke("getDateTimeServer", New Object() {Account, Pass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getDateTimeServerAsync(ByVal Account As String, ByVal Pass As String)
            Me.getDateTimeServerAsync(Account, Pass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getDateTimeServerAsync(ByVal Account As String, ByVal Pass As String, ByVal userState As Object)
            If (Me.getDateTimeServerOperationCompleted Is Nothing) Then
                Me.getDateTimeServerOperationCompleted = AddressOf Me.OngetDateTimeServerOperationCompleted
            End If
            Me.InvokeAsync("getDateTimeServer", New Object() {Account, Pass}, Me.getDateTimeServerOperationCompleted, userState)
        End Sub
        
        Private Sub OngetDateTimeServerOperationCompleted(ByVal arg As Object)
            If (Not (Me.getDateTimeServerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getDateTimeServerCompleted(Me, New getDateTimeServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncClientInvoiceCancel", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncClientInvoiceCancel(ByVal Account As String, ByVal Pass As String, ByVal xmlInvoiceCancel As String) As String
            Dim results() As Object = Me.Invoke("syncClientInvoiceCancel", New Object() {Account, Pass, xmlInvoiceCancel})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncClientInvoiceCancelAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlInvoiceCancel As String)
            Me.syncClientInvoiceCancelAsync(Account, Pass, xmlInvoiceCancel, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncClientInvoiceCancelAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlInvoiceCancel As String, ByVal userState As Object)
            If (Me.syncClientInvoiceCancelOperationCompleted Is Nothing) Then
                Me.syncClientInvoiceCancelOperationCompleted = AddressOf Me.OnsyncClientInvoiceCancelOperationCompleted
            End If
            Me.InvokeAsync("syncClientInvoiceCancel", New Object() {Account, Pass, xmlInvoiceCancel}, Me.syncClientInvoiceCancelOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncClientInvoiceCancelOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncClientInvoiceCancelCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncClientInvoiceCancelCompleted(Me, New syncClientInvoiceCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertForVerify", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConvertForVerify(ByVal Account As String, ByVal Pass As String, ByVal Id As Integer) As String
            Dim results() As Object = Me.Invoke("ConvertForVerify", New Object() {Account, Pass, Id})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ConvertForVerifyAsync(ByVal Account As String, ByVal Pass As String, ByVal Id As Integer)
            Me.ConvertForVerifyAsync(Account, Pass, Id, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ConvertForVerifyAsync(ByVal Account As String, ByVal Pass As String, ByVal Id As Integer, ByVal userState As Object)
            If (Me.ConvertForVerifyOperationCompleted Is Nothing) Then
                Me.ConvertForVerifyOperationCompleted = AddressOf Me.OnConvertForVerifyOperationCompleted
            End If
            Me.InvokeAsync("ConvertForVerify", New Object() {Account, Pass, Id}, Me.ConvertForVerifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnConvertForVerifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.ConvertForVerifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ConvertForVerifyCompleted(Me, New ConvertForVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendEmail", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function sendEmail(ByVal username As String) As String
            Dim results() As Object = Me.Invoke("sendEmail", New Object() {username})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub sendEmailAsync(ByVal username As String)
            Me.sendEmailAsync(username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub sendEmailAsync(ByVal username As String, ByVal userState As Object)
            If (Me.sendEmailOperationCompleted Is Nothing) Then
                Me.sendEmailOperationCompleted = AddressOf Me.OnsendEmailOperationCompleted
            End If
            Me.InvokeAsync("sendEmail", New Object() {username}, Me.sendEmailOperationCompleted, userState)
        End Sub
        
        Private Sub OnsendEmailOperationCompleted(ByVal arg As Object)
            If (Not (Me.sendEmailCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent sendEmailCompleted(Me, New sendEmailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncCert", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncCert(ByVal Account As String, ByVal Pass As String, ByVal xmlCert As String) As String
            Dim results() As Object = Me.Invoke("syncCert", New Object() {Account, Pass, xmlCert})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncCertAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlCert As String)
            Me.syncCertAsync(Account, Pass, xmlCert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncCertAsync(ByVal Account As String, ByVal Pass As String, ByVal xmlCert As String, ByVal userState As Object)
            If (Me.syncCertOperationCompleted Is Nothing) Then
                Me.syncCertOperationCompleted = AddressOf Me.OnsyncCertOperationCompleted
            End If
            Me.InvokeAsync("syncCert", New Object() {Account, Pass, xmlCert}, Me.syncCertOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncCertOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncCertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncCertCompleted(Me, New syncCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvoicev2", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncInvoicev2(ByVal username As String, ByVal password As String, ByVal comtaxCode As String, ByVal currentYear As String, ByVal lastSync As String) As String
            Dim results() As Object = Me.Invoke("syncInvoicev2", New Object() {username, password, comtaxCode, currentYear, lastSync})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncInvoicev2Async(ByVal username As String, ByVal password As String, ByVal comtaxCode As String, ByVal currentYear As String, ByVal lastSync As String)
            Me.syncInvoicev2Async(username, password, comtaxCode, currentYear, lastSync, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncInvoicev2Async(ByVal username As String, ByVal password As String, ByVal comtaxCode As String, ByVal currentYear As String, ByVal lastSync As String, ByVal userState As Object)
            If (Me.syncInvoicev2OperationCompleted Is Nothing) Then
                Me.syncInvoicev2OperationCompleted = AddressOf Me.OnsyncInvoicev2OperationCompleted
            End If
            Me.InvokeAsync("syncInvoicev2", New Object() {username, password, comtaxCode, currentYear, lastSync}, Me.syncInvoicev2OperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncInvoicev2OperationCompleted(ByVal arg As Object)
            If (Not (Me.syncInvoicev2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncInvoicev2Completed(Me, New syncInvoicev2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/syncInvoice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function syncInvoice(ByVal username As String, ByVal password As String, ByVal comtaxCode As String, ByVal lastSync As String) As String
            Dim results() As Object = Me.Invoke("syncInvoice", New Object() {username, password, comtaxCode, lastSync})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub syncInvoiceAsync(ByVal username As String, ByVal password As String, ByVal comtaxCode As String, ByVal lastSync As String)
            Me.syncInvoiceAsync(username, password, comtaxCode, lastSync, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub syncInvoiceAsync(ByVal username As String, ByVal password As String, ByVal comtaxCode As String, ByVal lastSync As String, ByVal userState As Object)
            If (Me.syncInvoiceOperationCompleted Is Nothing) Then
                Me.syncInvoiceOperationCompleted = AddressOf Me.OnsyncInvoiceOperationCompleted
            End If
            Me.InvokeAsync("syncInvoice", New Object() {username, password, comtaxCode, lastSync}, Me.syncInvoiceOperationCompleted, userState)
        End Sub
        
        Private Sub OnsyncInvoiceOperationCompleted(ByVal arg As Object)
            If (Not (Me.syncInvoiceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent syncInvoiceCompleted(Me, New syncInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSingleInvoice", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSingleInvoice(ByVal username As String, ByVal password As String, ByVal comtaxcode As String, ByVal pattern As String, ByVal serial As String, ByVal notax As String, ByVal isReSync As Integer) As String
            Dim results() As Object = Me.Invoke("GetSingleInvoice", New Object() {username, password, comtaxcode, pattern, serial, notax, isReSync})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetSingleInvoiceAsync(ByVal username As String, ByVal password As String, ByVal comtaxcode As String, ByVal pattern As String, ByVal serial As String, ByVal notax As String, ByVal isReSync As Integer)
            Me.GetSingleInvoiceAsync(username, password, comtaxcode, pattern, serial, notax, isReSync, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetSingleInvoiceAsync(ByVal username As String, ByVal password As String, ByVal comtaxcode As String, ByVal pattern As String, ByVal serial As String, ByVal notax As String, ByVal isReSync As Integer, ByVal userState As Object)
            If (Me.GetSingleInvoiceOperationCompleted Is Nothing) Then
                Me.GetSingleInvoiceOperationCompleted = AddressOf Me.OnGetSingleInvoiceOperationCompleted
            End If
            Me.InvokeAsync("GetSingleInvoice", New Object() {username, password, comtaxcode, pattern, serial, notax, isReSync}, Me.GetSingleInvoiceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetSingleInvoiceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetSingleInvoiceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetSingleInvoiceCompleted(Me, New GetSingleInvoiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PaymentForVerify", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function PaymentForVerify(ByVal Account As String, ByVal Pass As String, ByVal Id As Integer, ByVal payment As Integer, ByVal note As String) As String
            Dim results() As Object = Me.Invoke("PaymentForVerify", New Object() {Account, Pass, Id, payment, note})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub PaymentForVerifyAsync(ByVal Account As String, ByVal Pass As String, ByVal Id As Integer, ByVal payment As Integer, ByVal note As String)
            Me.PaymentForVerifyAsync(Account, Pass, Id, payment, note, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub PaymentForVerifyAsync(ByVal Account As String, ByVal Pass As String, ByVal Id As Integer, ByVal payment As Integer, ByVal note As String, ByVal userState As Object)
            If (Me.PaymentForVerifyOperationCompleted Is Nothing) Then
                Me.PaymentForVerifyOperationCompleted = AddressOf Me.OnPaymentForVerifyOperationCompleted
            End If
            Me.InvokeAsync("PaymentForVerify", New Object() {Account, Pass, Id, payment, note}, Me.PaymentForVerifyOperationCompleted, userState)
        End Sub
        
        Private Sub OnPaymentForVerifyOperationCompleted(ByVal arg As Object)
            If (Not (Me.PaymentForVerifyCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent PaymentForVerifyCompleted(Me, New PaymentForVerifyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashInvWithToken", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHashInvWithToken(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal serialCert As String, ByVal type As Integer, ByVal invToken As String, ByVal pattern As String, ByVal serial As String, ByVal convert As Integer) As String
            Dim results() As Object = Me.Invoke("getHashInvWithToken", New Object() {Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHashInvWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal serialCert As String, ByVal type As Integer, ByVal invToken As String, ByVal pattern As String, ByVal serial As String, ByVal convert As Integer)
            Me.getHashInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHashInvWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal serialCert As String, ByVal type As Integer, ByVal invToken As String, ByVal pattern As String, ByVal serial As String, ByVal convert As Integer, ByVal userState As Object)
            If (Me.getHashInvWithTokenOperationCompleted Is Nothing) Then
                Me.getHashInvWithTokenOperationCompleted = AddressOf Me.OngetHashInvWithTokenOperationCompleted
            End If
            Me.InvokeAsync("getHashInvWithToken", New Object() {Account, ACpass, xmlInvData, username, password, serialCert, type, invToken, pattern, serial, convert}, Me.getHashInvWithTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHashInvWithTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHashInvWithTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHashInvWithTokenCompleted(Me, New getHashInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/publishInvWithToken", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function publishInvWithToken(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String) As String
            Dim results() As Object = Me.Invoke("publishInvWithToken", New Object() {Account, ACpass, xmlInvData, username, password, pattern, serial})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub publishInvWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String)
            Me.publishInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, pattern, serial, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub publishInvWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal serial As String, ByVal userState As Object)
            If (Me.publishInvWithTokenOperationCompleted Is Nothing) Then
                Me.publishInvWithTokenOperationCompleted = AddressOf Me.OnpublishInvWithTokenOperationCompleted
            End If
            Me.InvokeAsync("publishInvWithToken", New Object() {Account, ACpass, xmlInvData, username, password, pattern, serial}, Me.publishInvWithTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnpublishInvWithTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.publishInvWithTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent publishInvWithTokenCompleted(Me, New publishInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AdjustReplaceInvWithToken", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AdjustReplaceInvWithToken(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal type As Integer, ByVal pattern As String, ByVal serial As String) As String
            Dim results() As Object = Me.Invoke("AdjustReplaceInvWithToken", New Object() {Account, ACpass, xmlInvData, username, password, type, pattern, serial})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AdjustReplaceInvWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal type As Integer, ByVal pattern As String, ByVal serial As String)
            Me.AdjustReplaceInvWithTokenAsync(Account, ACpass, xmlInvData, username, password, type, pattern, serial, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AdjustReplaceInvWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlInvData As String, ByVal username As String, ByVal password As String, ByVal type As Integer, ByVal pattern As String, ByVal serial As String, ByVal userState As Object)
            If (Me.AdjustReplaceInvWithTokenOperationCompleted Is Nothing) Then
                Me.AdjustReplaceInvWithTokenOperationCompleted = AddressOf Me.OnAdjustReplaceInvWithTokenOperationCompleted
            End If
            Me.InvokeAsync("AdjustReplaceInvWithToken", New Object() {Account, ACpass, xmlInvData, username, password, type, pattern, serial}, Me.AdjustReplaceInvWithTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnAdjustReplaceInvWithTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.AdjustReplaceInvWithTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AdjustReplaceInvWithTokenCompleted(Me, New AdjustReplaceInvWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelInvoiceWithToken", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CancelInvoiceWithToken(ByVal Account As String, ByVal ACpass As String, ByVal xmlData As String, ByVal username As String, ByVal password As String, ByVal pattern As String) As String
            Dim results() As Object = Me.Invoke("CancelInvoiceWithToken", New Object() {Account, ACpass, xmlData, username, password, pattern})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CancelInvoiceWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlData As String, ByVal username As String, ByVal password As String, ByVal pattern As String)
            Me.CancelInvoiceWithTokenAsync(Account, ACpass, xmlData, username, password, pattern, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CancelInvoiceWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal xmlData As String, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal userState As Object)
            If (Me.CancelInvoiceWithTokenOperationCompleted Is Nothing) Then
                Me.CancelInvoiceWithTokenOperationCompleted = AddressOf Me.OnCancelInvoiceWithTokenOperationCompleted
            End If
            Me.InvokeAsync("CancelInvoiceWithToken", New Object() {Account, ACpass, xmlData, username, password, pattern}, Me.CancelInvoiceWithTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnCancelInvoiceWithTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.CancelInvoiceWithTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CancelInvoiceWithTokenCompleted(Me, New CancelInvoiceWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/rolBackWithToken", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function rolBackWithToken(ByVal Account As String, ByVal ACpass As String, ByVal id As String, ByVal username As String, ByVal password As String, ByVal pattern As String) As String
            Dim results() As Object = Me.Invoke("rolBackWithToken", New Object() {Account, ACpass, id, username, password, pattern})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub rolBackWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal id As String, ByVal username As String, ByVal password As String, ByVal pattern As String)
            Me.rolBackWithTokenAsync(Account, ACpass, id, username, password, pattern, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub rolBackWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal id As String, ByVal username As String, ByVal password As String, ByVal pattern As String, ByVal userState As Object)
            If (Me.rolBackWithTokenOperationCompleted Is Nothing) Then
                Me.rolBackWithTokenOperationCompleted = AddressOf Me.OnrolBackWithTokenOperationCompleted
            End If
            Me.InvokeAsync("rolBackWithToken", New Object() {Account, ACpass, id, username, password, pattern}, Me.rolBackWithTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnrolBackWithTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.rolBackWithTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent rolBackWithTokenCompleted(Me, New rolBackWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/importCertWithToken", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function importCertWithToken(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal certStr As String) As String
            Dim results() As Object = Me.Invoke("importCertWithToken", New Object() {Account, ACpass, username, password, certStr})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub importCertWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal certStr As String)
            Me.importCertWithTokenAsync(Account, ACpass, username, password, certStr, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub importCertWithTokenAsync(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal certStr As String, ByVal userState As Object)
            If (Me.importCertWithTokenOperationCompleted Is Nothing) Then
                Me.importCertWithTokenOperationCompleted = AddressOf Me.OnimportCertWithTokenOperationCompleted
            End If
            Me.InvokeAsync("importCertWithToken", New Object() {Account, ACpass, username, password, certStr}, Me.importCertWithTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnimportCertWithTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.importCertWithTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent importCertWithTokenCompleted(Me, New importCertWithTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getStatusInv", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getStatusInv(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal xmlFkeyInv As String, ByVal pattern As String) As String
            Dim results() As Object = Me.Invoke("getStatusInv", New Object() {Account, ACpass, username, password, xmlFkeyInv, pattern})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getStatusInvAsync(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal xmlFkeyInv As String, ByVal pattern As String)
            Me.getStatusInvAsync(Account, ACpass, username, password, xmlFkeyInv, pattern, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getStatusInvAsync(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal xmlFkeyInv As String, ByVal pattern As String, ByVal userState As Object)
            If (Me.getStatusInvOperationCompleted Is Nothing) Then
                Me.getStatusInvOperationCompleted = AddressOf Me.OngetStatusInvOperationCompleted
            End If
            Me.InvokeAsync("getStatusInv", New Object() {Account, ACpass, username, password, xmlFkeyInv, pattern}, Me.getStatusInvOperationCompleted, userState)
        End Sub
        
        Private Sub OngetStatusInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.getStatusInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getStatusInvCompleted(Me, New getStatusInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/getHashInv", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getHashInv(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal serialCert As String, ByVal xmlFkeyInv As String, ByVal pattern As String) As String
            Dim results() As Object = Me.Invoke("getHashInv", New Object() {Account, ACpass, username, password, serialCert, xmlFkeyInv, pattern})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getHashInvAsync(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal serialCert As String, ByVal xmlFkeyInv As String, ByVal pattern As String)
            Me.getHashInvAsync(Account, ACpass, username, password, serialCert, xmlFkeyInv, pattern, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getHashInvAsync(ByVal Account As String, ByVal ACpass As String, ByVal username As String, ByVal password As String, ByVal serialCert As String, ByVal xmlFkeyInv As String, ByVal pattern As String, ByVal userState As Object)
            If (Me.getHashInvOperationCompleted Is Nothing) Then
                Me.getHashInvOperationCompleted = AddressOf Me.OngetHashInvOperationCompleted
            End If
            Me.InvokeAsync("getHashInv", New Object() {Account, ACpass, username, password, serialCert, xmlFkeyInv, pattern}, Me.getHashInvOperationCompleted, userState)
        End Sub
        
        Private Sub OngetHashInvOperationCompleted(ByVal arg As Object)
            If (Not (Me.getHashInvCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getHashInvCompleted(Me, New getHashInvCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub ImportAndPublishInvCompletedEventHandler(ByVal sender As Object, ByVal e As ImportAndPublishInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportAndPublishInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub ImportInvCompletedEventHandler(ByVal sender As Object, ByVal e As ImportInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub publishInvCompletedEventHandler(ByVal sender As Object, ByVal e As publishInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class publishInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub UpdateCusCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateCusCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateCusCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub setCusCertCompletedEventHandler(ByVal sender As Object, ByVal e As setCusCertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setCusCertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub ImportFromXmlCompletedEventHandler(ByVal sender As Object, ByVal e As ImportFromXmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ImportFromXmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncInfomationCompletedEventHandler(ByVal sender As Object, ByVal e As syncInfomationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncInfomationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub SignInCompletedEventHandler(ByVal sender As Object, ByVal e As SignInCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SignInCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub resetPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As resetPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class resetPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub AppClientSyncInfoSystemCompletedEventHandler(ByVal sender As Object, ByVal e As AppClientSyncInfoSystemCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AppClientSyncInfoSystemCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getCurrentNoCompletedEventHandler(ByVal sender As Object, ByVal e As getCurrentNoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCurrentNoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncClientInvCompletedEventHandler(ByVal sender As Object, ByVal e As syncClientInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncClientInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub updateInvoiceCompletedEventHandler(ByVal sender As Object, ByVal e As updateInvoiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class updateInvoiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncDecisionCompletedEventHandler(ByVal sender As Object, ByVal e As syncDecisionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncDecisionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncPublishCompletedEventHandler(ByVal sender As Object, ByVal e As syncPublishCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncPublishCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub GetPublishInvCompletedEventHandler(ByVal sender As Object, ByVal e As GetPublishInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPublishInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncInvCancelCompletedEventHandler(ByVal sender As Object, ByVal e As syncInvCancelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncInvCancelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getDateTimeServerCompletedEventHandler(ByVal sender As Object, ByVal e As getDateTimeServerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getDateTimeServerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncClientInvoiceCancelCompletedEventHandler(ByVal sender As Object, ByVal e As syncClientInvoiceCancelCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncClientInvoiceCancelCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub ConvertForVerifyCompletedEventHandler(ByVal sender As Object, ByVal e As ConvertForVerifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ConvertForVerifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub sendEmailCompletedEventHandler(ByVal sender As Object, ByVal e As sendEmailCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class sendEmailCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncCertCompletedEventHandler(ByVal sender As Object, ByVal e As syncCertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncCertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncInvoicev2CompletedEventHandler(ByVal sender As Object, ByVal e As syncInvoicev2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncInvoicev2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub syncInvoiceCompletedEventHandler(ByVal sender As Object, ByVal e As syncInvoiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class syncInvoiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub GetSingleInvoiceCompletedEventHandler(ByVal sender As Object, ByVal e As GetSingleInvoiceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetSingleInvoiceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub PaymentForVerifyCompletedEventHandler(ByVal sender As Object, ByVal e As PaymentForVerifyCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class PaymentForVerifyCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getHashInvWithTokenCompletedEventHandler(ByVal sender As Object, ByVal e As getHashInvWithTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHashInvWithTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub publishInvWithTokenCompletedEventHandler(ByVal sender As Object, ByVal e As publishInvWithTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class publishInvWithTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub AdjustReplaceInvWithTokenCompletedEventHandler(ByVal sender As Object, ByVal e As AdjustReplaceInvWithTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AdjustReplaceInvWithTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub CancelInvoiceWithTokenCompletedEventHandler(ByVal sender As Object, ByVal e As CancelInvoiceWithTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CancelInvoiceWithTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub rolBackWithTokenCompletedEventHandler(ByVal sender As Object, ByVal e As rolBackWithTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class rolBackWithTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub importCertWithTokenCompletedEventHandler(ByVal sender As Object, ByVal e As importCertWithTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class importCertWithTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getStatusInvCompletedEventHandler(ByVal sender As Object, ByVal e As getStatusInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getStatusInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0")>  _
    Public Delegate Sub getHashInvCompletedEventHandler(ByVal sender As Object, ByVal e As getHashInvCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2558.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getHashInvCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
