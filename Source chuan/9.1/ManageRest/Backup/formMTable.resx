<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ImageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ImageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAC
        CAAAAk1TRnQBSQFMAwEBAAFIAQABSAEAASABAAEgAQAE/wERAQAI/wFCAU0BNgcAATYDAAEoAwABgAMA
        ASADAAEBAQABEAYAASD/AP8AGgAB3gF7AZwBdwFaAXcBGAFzAVkBcwF7AXMB3gF78gABnAF3AdYBcgEO
        AW4BJwFlAc0BZQFzAWYBewFz8gABewF3AXEBcgHMAXEBJgFtAmkBzAFlAVkBcx4AAd4CewFzAd4Be84A
        AVkBdwHtAXEBaQFxAQUBdQEFAWkBBgFhARgBcx4AAXsBcwFSAWYBewFzzgABWQF3Ae0BdQFpAXEBBQFx
        AeUBaAHlAWABFwFzFgAB3gF7Ad4BewGcAXcBewF3AfYBbgExAWoBegF3zgABWQF3Ae0BdQFpAXEBBAFt
        AeQBaAHDAWQBFwFzFgAB3gF7Af8BfwE5AXcBcwFuAVEBbgEQAWoBWgF3zgABegF3AVEBdgGKAXEB5AFs
        AcMBaAGiAWQBUQFuAXsBcwHeAXsSAAHeAXsB3gF7AfcBcgGsAWkBtAFyAVoBdwG9AXvOAAJ7AbQBdgHM
        AXEBwwFsAaIBaAGBAWQBaQFlAVEBZgF7AXMWAAEYAXcBBgFpARgBd9IAAd4DewGTAXIBJgFtAcMBaAGA
        AWQBBQFlAYsBYQE5AXMOAAHeAXsB3gJ7AXcBOAF3AXEBbgJpATgBd9YAATkBdwGJAW0BBQFpAWABaAGi
        AWQBxAFgARcBcw4AAd4BewH/AXsBswFyAUgBbQGKAW0BrAFtAVkBd9YAAb0BewE5AXcBLwFuAcIBaAGi
        AWQBggFgAQ8BagE4AXMBvQF7CgABnAF3AfcBcgEOAW4BBgFpAVEBcgFZAXcBvQF72gABFwF3AQUBaQGi
        AWgBQAFkAcQBYAFJAV0BOAFzCgABWgF3AQ4BbgJpAcMBaAEXAXfeAAFaAXcBLwFyAUgBbQGBAWQBowFk
        AcQBYAFRAWoBWgFzAb0BewIAAd0BewF6AXcCcgEnAW0BaQFtAasBbQE5AXfeAAGcAXsBOQF7Ae4BcQHD
        AWgBgQFkAUABZAEnAWUB7gFhAVoBcwIAAXoBdwEwAW4BSAFtAUABaAFqAW0BkwFyAXsBd94AAd4BewGc
        AXsB9gF2Ae4BcQFIAW0BogFoAQUBZQFIAWEBUQFqARgBcwFRAW4BSAFtAScBbQEmAW0BkwFyAXsBdwHe
        AXviAAGcAXsBOAF7AS8BcgEFAWkBxAFkAaIBZAHlAWABKAFhAcQBZAFgAWgBJgFtAe0BbQFZAXfmAAHe
        AXsBnAF7AdYBcgHMAWkBBgFlAWEBYAGCAWABpAFgAYMBYAGBAWQBMAFuAVkBdwG9AXvqAAF7AXcBcwFq
        AWkBZQFAAWABIAFgAQABYAFhAVwBowFcAfcBcuoAAb0BewFaAXcBkwFuAYoBaQHlAWgBQAFkAUABZAFB
        AWABYQFgAYIBXAEQAWoBWQFzAb0Be+YAAVoBdwEwAWoCaQGiAWgBYQFoAUABaAFhAWQBggFkAWEBYAFA
        AVwBBwFdAc0BXQFZAXPeAAHeAXsBnAF3AXsBdwFaAXcBtAFyAcwBbQEnAXEBogFwAaMBbAGjAWwB7gFt
        AfcBcgEwAW4CaQFIAWUBBwFlAVEBagE5AXMBvQF7AgAB3gF7Ad4BewHeAXvSAAGcAXcB9wFuAXIBbgEO
        AW4BqwFxAUgBdQEFAXUBwgF0AeQBcAEmAW0BGAF3AgABewF3AXIBdgFpAXEBYQFoAeUBZAFqAWEBOQFz
        AgAB3gF7Af8BfwHeAXvOAAG9AXsBWgF3AfcBcgGTAXIBUQFyAS8BdgHsAXUBigF1AYkBdQFoAXUBUQF2
        ARgBdwG9AXsCAAHeAnsBdwE5AXcB9gF2AVEBcgHMAW0BkwFuAVkBdwE5AXMBewF3Ab0Bd84AAVoBdwEw
        AWoBLwFuAS8BdgEvAXYBUAF6AQ4BegHMAXUB7QF1AQ4BcgFaAXcOAAFaAXcBDgF2Ae0BbQHMAWUBUgFq
        AfcBagGcAXfOAAFaAXcBDgFyAQ4BcgEOAXYBLwF2AVABegFRAXYBcQF2AfYBdgFaAXcBvQF7DgABvQF7
        AVoBdwH2AXYBcQJyAW4BcwFuAfYBbgFaAXMBvQF7ygABWQF3Ae0BdQHtAXUB7QF1AQ4BdgFQAXYBswF2
        ARcBdwGcAXcWAAGcAXsB9wF+AZMBdgEOAW4BDwFqARABYgFaAXPKAAG9AXsBWQF3AVkBdwFZAXcBWgF3
        AXoBdwF7AXcBnAF3Ad4BexYAAd4BewGcAnsBdwFaAXcBWgF3AVoBcwG9AXv/AP8A/wDHAAFCAU0BPgcA
        AT4DAAEoAwABgAMAASADAAEBAQABAQYAAQIWAAP/AQAE/wwABP8MAAHgAT8C/wwAAeABPwL/DAAB4AE/
        Af8BjwwAAeABPwH/AY8MAAHgAT8B+AEPDAAB4AE/AfgBDwwAAeABDwH4AQ8MAAHgAQ8B/gE/DAAB4AEP
        AeABPwwAAfgBDwHgAT8MAAH4AQMB4AE/DAAB/gEDAeAB/wwAAf4BAAGAAf8MAAH+AQABgAH/DAAB/gIA
        Af8MAAH/AYABAwH/DAAB/wGAAQMB/wwAAf8B4AEPAf8MAAH/AYABAwH/DAAB/wGAAQMB/wwAAfgCAAGP
        DAAB+AEAAYABjwwAAeABAAGAAQ8MAAHgAQMB+AEPDAAB4AEDAfgBAwwAAeABDwH+AQMMAAHgAQ8B/gED
        DAAE/wwABP8MAAT/DAAL
</value>
  </data>
</root>